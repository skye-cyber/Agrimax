import datetime
# import os

import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

# from django.conf import settings

time = datetime.datetime.now().strftime("%d_%m_%y-%H:%M")
# fig_root = settings.MEDIA_ROOT


class Draw:
    def __init__(self, data: dict = None):
        self.data = data

    def PieChart(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 6.76, 5.14, 3.36, 2.42, 2.08]

        # Create Pie Chart
        plt.figure(figsize=(5, 5))
        plt.pie(percentages, labels=crops, autopct='%1.1f%%', startangle=140)
        plt.title('Crop Suitability Distribution')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'PieChart_{time}'))

    def BarChart(self):
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 6.76, 5.14, 3.36, 2.42, 2.08]

        # Create Bar Chart
        plt.figure(figsize=(5, 3))
        plt.bar(crops, percentages, color='skyblue')
        plt.xlabel('Crops')
        plt.ylabel('Suitability (%)')
        plt.title('Crop Suitability Comparison')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'BarChart_{time}'))

    def StackedBarChart(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 6.76, 5.14, 3.36, 2.42, 2.08]

        # Create Stacked Bar Chart
        plt.figure(figsize=(6, 4))
        plt.bar(crops, percentages, color='lightgreen')
        plt.title('Crop Suitability - Stacked Bar')
        plt.xlabel('Crops')
        plt.ylabel('Suitability (%)')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'StackedBarChart_{time}'))

    def ParetoChart(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 6.76, 5.14, 3.36, 2.42, 2.08]
        sorted_percentages = sorted(percentages, reverse=True)
        cumulative_percentage = np.cumsum(sorted_percentages)

        # Create Pareto Chart
        fig, ax = plt.subplots(figsize=(5, 3))

        ax.bar(crops, sorted_percentages, color='lightblue')
        ax.set_xlabel('Crops')
        ax.set_ylabel('Suitability (%)')

        # Cumulative percentage line
        ax2 = ax.twinx()
        ax2.plot(crops, cumulative_percentage,
                 color='red', marker="D", linestyle='-')
        ax2.set_ylabel('Cumulative Percentage (%)')

        plt.title('Pareto Chart of Crop Suitability')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'ParetoChart_{time}'))

    def RadarChart(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 6.76, 5.14, 3.36, 2.42, 2.08]

        # Number of variables
        num_vars = len(crops)

        # Create Radar Chart
        angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
        percentages += percentages[:1]
        angles += angles[:1]

        fig, ax = plt.subplots(figsize=(5, 5), subplot_kw=dict(polar=True))
        ax.fill(angles, percentages, color='blue', alpha=0.25)
        ax.plot(angles, percentages, color='blue', linewidth=2)

        ax.set_yticklabels([])
        ax.set_xticks(angles[:-1])
        ax.set_xticklabels(crops)
        plt.title('Radar Chart of Crop Suitability')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'RadarChart_{time}'))

    def CreateHeatmap(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 76.76, 35.14, 23.36, 12.42, 2.08]

        # Create Heatmap
        plt.figure(figsize=(5, 1))
        sns.heatmap([percentages], annot=True, cmap='YlGnBu', cbar=False,
                    xticklabels=crops, yticklabels=['Suitability'])
        plt.title('Heatmap of Crop Suitability')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'CreateHeatmap_{time}'))

    def FunnelChart(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 6.76, 5.14, 3.36, 2.42, 2.08]

        # Create Funnel Chart
        plt.figure(figsize=(5, 5))
        plt.fill_betweenx(crops, percentages, color='lightcoral', alpha=0.7)
        plt.xlabel('Suitability (%)')
        plt.ylabel('Crops')
        plt.title('Funnel Chart of Crop Suitability')
        plt.gca().invert_yaxis()
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'FunnelChart_{time}'))

    def DoughnutChart(self):
        # Data
        crops = ['Barley', 'Blackgram', 'Apple',
                 'Grapes', 'Pigeonpeas', 'Cotton']
        percentages = [96.88, 66.76, 75.14, 33.36, 2.42, 2.08]

        # Create Doughnut Chart
        plt.figure(figsize=(5, 5))
        plt.pie(percentages, labels=crops, autopct='%1.1f%%',
                startangle=140, wedgeprops=dict(width=0.4))
        plt.title('Doughnut Chart of Crop Suitability')
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'DoughnutChart_{time}'))

    def LineChart(self):
        # Simulated data (e.g., crop suitability over time)
        years = [2020, 2021, 2022, 2023, 2024]
        barley_suitability = [90.2, 91.5, 93.0, 95.8, 96.88]

        # Create Line Chart
        plt.figure(figsize=(6, 4))
        plt.plot(years, barley_suitability, marker='o',
                 color='green', label='Barley')
        plt.xlabel('Years')
        plt.ylabel('Suitability (%)')
        plt.title('Trend of Barley Suitability Over Time')
        plt.legend()
        # plt.show()
        # plt.savefig(os.path.join(fig_root, f'LineChart_{time}'))


init = Draw()
init.BarChart()
# init.CreateHeatmap()
# init.DoughnutChart()
# init.FunnelChart()
# init.LineChart()
# init.ParetoChart()
# init.PieChart()
# init.RadarChart()
# init.StackedBarChart()
