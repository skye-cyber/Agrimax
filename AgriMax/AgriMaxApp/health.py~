import numpy as np
import pandas as pd

# Define optimal conditions for each crop
crop_requirements = {
    'rice': {'pH': (6.0, 7.0), 'N': (80, 120), 'P': (70, 90), 'K': (100, 120)},
    'wheat': {'pH': (6.0, 6.5), 'N': (50, 100), 'P': (30, 70), 'K': (50, 100)},
    'maize': {'pH': (6.0, 6.8), 'N': (100, 150), 'P': (90, 120), 'K': (100, 150)},
    'sugarcane': {'pH': (6.5, 7.5), 'N': (80, 120), 'P': (60, 90), 'K': (90, 130)},
    'barley': {'pH': (5.5, 6.5), 'N': (30, 60), 'P': (30, 50), 'K': (50, 80)},
    'potato': {'pH': (5.0, 6.5), 'N': (60, 90), 'P': (50, 70), 'K': (50, 100)},
    'soybean': {'pH': (6.0, 6.8), 'N': (80, 120), 'P': (50, 90), 'K': (80, 110)},
    'coffee': {'pH': (6.0, 6.8), 'N': (80, 110), 'P': (60, 90), 'K': (80, 100)},
    'tea': {'pH': (5.0, 6.5), 'N': (60, 90), 'P': (30, 60), 'K': (50, 80)},
    'peas': {'pH': (5.5, 6.5), 'N': (50, 70), 'P': (30, 50), 'K': (40, 60)},
    'cotton': {'pH': (6.0, 7.5), 'N': (60, 100), 'P': (40, 80), 'K': (50, 100)},
    'tomato': {'pH': (5.5, 6.8), 'N': (100, 140), 'P': (60, 100), 'K': (80, 120)},
    'onion': {'pH': (6.0, 7.0), 'N': (50, 80), 'P': (40, 70), 'K': (30, 60)},
    'banana': {'pH': (5.5, 7.5), 'N': (150, 200), 'P': (80, 120), 'K': (150, 200)},
    'pepper': {'pH': (5.5, 6.8), 'N': (100, 140), 'P': (40, 80), 'K': (80, 120)},
    'cassava': {'pH': (5.5, 7.0), 'N': (50, 100), 'P': (30, 60), 'K': (40, 80)},
    'spinach': {'pH': (6.0, 7.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'kale': {'pH': (6.0, 7.5), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'millet': {'pH': (5.5, 7.0), 'N': (30, 60), 'P': (20, 40), 'K': (30, 50)},
    'sorghum': {'pH': (5.5, 7.0), 'N': (40, 80), 'P': (20, 40), 'K': (30, 50)},
    'greengram': {'pH': (6.0, 7.0), 'N': (40, 80), 'P': (20, 40), 'K': (30, 50)},
    'cowpeas': {'pH': (6.0, 7.0), 'N': (40, 80), 'P': (20, 40), 'K': (30, 50)},
    'sunflower': {'pH': (6.0, 7.5), 'N': (60, 100), 'P': (40, 70), 'K': (60, 90)},
    'yam': {'pH': (5.5, 7.0), 'N': (60, 100), 'P': (40, 70), 'K': (50, 80)},
    'oats': {'pH': (6.0, 7.0), 'N': (50, 80), 'P': (30, 50), 'K': (40, 60)},
    'garlic': {'pH': (6.0, 7.0), 'N': (60, 100), 'P': (40, 70), 'K': (50, 80)},
    'lettuce': {'pH': (6.0, 7.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'cucumber': {'pH': (6.0, 7.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'chickpea': {'pH': (6.0, 7.0), 'N': (40, 80), 'P': (20, 40), 'K': (30, 50)},
    'blackgram': {'pH': (6.0, 7.0), 'N': (40, 80), 'P': (20, 40), 'K': (30, 50)},
    'pomegranate': {'pH': (6.0, 7.5), 'N': (60, 100), 'P': (40, 70), 'K': (60, 90)},
    'grapes': {'pH': (6.0, 7.5), 'N': (50, 100), 'P': (30, 60), 'K': (60, 100)},
    'watermelon': {'pH': (6.0, 7.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'apple': {'pH': (6.0, 7.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'orange': {'pH': (6.0, 7.5), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'lemon': {'pH': (6.0, 7.5), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'mango': {'pH': (5.5, 7.5), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'pawpaw': {'pH': (5.5, 7.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'coconut': {'pH': (5.5, 8.0), 'N': (80, 120), 'P': (40, 70), 'K': (60, 90)},
    'pigeonpeas': {'pH': (6.0, 7.0), 'N': (40, 80), 'P': (20, 40), 'K': (30, 50)}
}


class Health:
    def normalize_metric(self, value, ideal_range):
        lower, upper = ideal_range
        if lower <= value <= upper:
            return 100  # Perfect fit within the range
        elif value < lower:
            # Deviation below the lower bound
            deviation = lower - value
            score = max(0, 100 - (deviation / lower * 100))
        else:
            # Deviation above the upper bound
            deviation = value - upper
            score = max(0, 100 - (deviation / upper * 100))

        return score

    def evaluate_soil_health(self, N, P, K, pH, target_crop=None):
        recommendations = {}
        crops_to_evaluate = [target_crop] if target_crop else crop_requirements.keys()

        for crop in crops_to_evaluate:
            if crop in crop_requirements:
                req = crop_requirements[crop]
                nitrogen_score = self.normalize_metric(N, req['N'])
                phosphorus_score = self.normalize_metric(P, req['P'])
                potassium_score = self.normalize_metric(K, req['K'])
                ph_score = self.normalize_metric(pH, req['pH'])

                recommendations[crop] = {
                    'Nitrogen': nitrogen_score,
                    'Phosphorus': phosphorus_score,
                    'Potassium': potassium_score,
                    'pH': ph_score,
                    'Comments': {
                        'Nitrogen': f"Excellent Nitrogen levels (N={N})" if nitrogen_score == 100 else f"Low Nitrogen levels. Consider adding more (ideal={req['N']}, current={N})",
                        'Phosphorus': f"Excellent Phosphorus levels (P={P})" if phosphorus_score == 100 else f"Low Phosphorus levels. Consider adding more (ideal={req['P']}, current={P})",
                        'Potassium': f"Excellent Potassium levels (K={K})" if potassium_score == 100 else f"Low Potassium levels. Consider adding more (ideal={req['K']}, current={K})",
                        'pH': f"Excellent pH levels (pH={pH})" if ph_score == 100 else f"pH levels not ideal. ideal (ideal={req['pH']}, current={pH})"
                    }
                }
            else:
                print(f"Warning: {crop} not found in crop requirements.")

        return recommendations


def get_valid_input(prompt):
    while True:
        try:
            val = float(input(prompt))
            return val
        except ValueError:
            print("\033[31mInvalid input. Please enter a numeric value.\033[0m")


def main():
    try:
        # Collect inputs with validation
        N = get_valid_input("\033[94mPlease Enter N (Nitrogen Level): \033[0;1m")
        P = get_valid_input("\033[94mPlease Enter P (Phosphorous Level): \033[0;1m")
        K = get_valid_input("\033[94mPlease Enter K (Potassium Level): \033[0;1m")
        pH = get_valid_input("\033[94mPlease Enter pH: \033[0;1m")

        # Ask for target crop
        target_crop = input("\033[94mPlease enter the target crop (or press Enter for all crops): \033[0;1m").strip().lower()

        # Evaluate soil health
        health = Health()
        recommendations = health.evaluate_soil_health(N, P, K, pH, target_crop if target_crop else None)

        print("\033[1mSoil Health Recommendations:\033[0m")
        if recommendations:
            for crop, metrics in recommendations.items():
                print(f"\033[93m{crop.capitalize()}:\033[0m")
                for nutrient, score in metrics.items():
                    if nutrient != 'Comments':
                        print(f"    {nutrient}: {score:.2f}% commend: {metrics['Comments'][nutrient]}")
        else:
            print("No recommendations available.")

    except Exception as e:
        print(f"\033[31mAn error occurred: {e}\033[0m")


if __name__ == "__main__":
    main()
